

/**
 * Simple Binary tree program implementation without using Collections framework
 * Tree Class 
 *
 */
public class Tree {

	private Node root;

	/**
	 * Constructor, initialize node value
	 */
	public Tree(){
		root = null ;
	}

	/**
	 * Finding the node
	 * @param key
	 * @return
	 */
	public Node find ( int key ){

		Node current = root ;
		while(current.iData != key){
			if(key < current.iData)
				current = current.leftChild ;

			else
				current = current.rightChild ;

			if(current == null)
				try {
					throw new Exception("Error101 : No Node value found") ;
				} catch (Exception e) {
					e.getMessage();
				}

			return null;

		}

		return current ;

	}

	/**
	 * Insert the Node in a tree
	 * @param id
	 * @param dd
	 */
	public void insert( int id, double dd){

		Node newNode = new Node() ;
		newNode.iData = id ;
		newNode.dData = dd ;
		if(root == null){
			root = newNode ;
		}else{
			Node current = root ;
			Node parent ;
			while(true){
				parent = current ;
				if( id < current.iData ){
					current = current.leftChild ;
					if( current == null ){
						parent.leftChild = newNode ;
						return ;
					}
				}
				else{
					current = current.rightChild ;
					if( current == null ){
						parent.rightChild = newNode ;
						return ;
					}
				}	
			}
		}
	}
	
	/**
	 * returns node with next-highest value after delNode
     * goes to right child, then right childâ€™s left descendents
	 * @param delNode
	 * @return
	 */
	private Node getSuccessor(Node delNode){
		Node successor = delNode ;
		Node successorParent = delNode ;
		Node current = delNode.rightChild ;
		while( current != null ){
			successorParent = successor ;
			successor = current ;
			current = current.leftChild ;
		}
		
		if( successor != delNode.rightChild ){
			successorParent.leftChild = successor.rightChild ;
			successor.rightChild = delNode.rightChild ;
		}
		return successor ;
	}
	
	/**
	 * delete the Node
	 * @param key
	 * @return
	 */
	public boolean delete( int key ){
		
		Node current = root ;
		Node parent = root ;
		boolean isLeftChild = true ;
		
		while( current.iData != key ){
			parent = current ;
			if( key < current.iData ){
				isLeftChild = true ;
				current = current.leftChild ;
			}else{
				isLeftChild = false ;
				current = current.rightChild ;
			}
			if( current == null ){
				return false ;
			}
		}
		
		/**
		 * if no children, simply delete it 
		 */
		if( current.leftChild == null &&
				current.rightChild == null ){
			if( current == root )
				root = null ;
			else if ( isLeftChild ){
				parent.leftChild = null ;
			}
			else{
				parent.rightChild = null ;
			}
		}
		
		/**
		 * if no right child, replace with left subtree 
		 */
		else if( current.rightChild == null ){
			if( current == root ){
				root = current.leftChild ;
			}
			else if( isLeftChild ){
				parent.leftChild = current.leftChild ;
			}
			else{
				parent.rightChild = current.leftChild ;
				
			}
		}
		
		/**
		 * if no left child, replace with right subtree 
		 */
		else if ( current.leftChild == null ){
			if ( root == null ){
				root = current.rightChild ;
			}
			else if( isLeftChild ){
				parent.leftChild = current.rightChild ;
			}
			else{
				parent.rightChild = current.rightChild ;
			}
		}
		
		/**
		 * two children, so replace with inorder successor
		 */
		else{
			Node successor = getSuccessor( current ) ;
			
			if( current == root ){
				root = successor ;
			}else if( isLeftChild ){
				parent.leftChild = successor ;
			}else{
				parent.rightChild = successor ;
			}
			
			successor.leftChild = current.rightChild ;
	    }
		
		return true ;
	
	}
	
	/**
	 * Pre-order tree travesal
	 */
	private void preOrder( Node localRoot ){
	
		if( localRoot != null ){
			System.out.print( localRoot.iData + " ") ;
			preOrder( localRoot.leftChild ) ;
			preOrder( localRoot.rightChild ) ;
		}
		
	}
	/**
	 * In-order tree travesal
	 */
	private void inOrder( Node localRoot ){
	
		if( localRoot != null ){
			
			inOrder( localRoot.leftChild ) ;
			System.out.print( localRoot.iData + " ") ;
			inOrder( localRoot.rightChild ) ;
		}
		
	}
	
	/**
	 * Post-order tree travesal
	 */
	private void postOrder( Node localRoot ){
	
		if( localRoot != null ){
			
			postOrder( localRoot.leftChild ) ;
			postOrder( localRoot.rightChild ) ;
			System.out.print( localRoot.iData + " ") ;
			
		}
		
	}
	
	/**
	 * Tree Traversal
	 */
	public void traverse(int traverseType){
		
	 switch( traverseType ){
	 
	 	case 1: System.out.print("\nPre-Order traversal: ");
	 			preOrder(root) ;
	 			break;
	 			
	 	case 2: System.out.print("\nIn-Order traversal: ");
	 			inOrder(root) ;
	 			break;
	 			
	 	case 3: System.out.print("\nPost-Order traversal: ");
	 			postOrder(root) ;
	 			break;
	 }
	 System.out.println();
	 
	}
}



